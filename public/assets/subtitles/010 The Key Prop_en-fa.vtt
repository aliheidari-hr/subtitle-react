WEBVTT

1
00:00:00.479 --> 00:00:03.480
به یاد داشته باشید که چگونه به پایه کلید اشاره کردم

2
00:00:03.480 --> 00:00:07.200
زمانی که در مورد نحوه عملکرد الگوریتم تفاوت صحبت کردیم.

3
00:00:07.200 --> 00:00:09.000
و بنابراین، بیایید کمی وقت نگذاریم

4
00:00:09.000 --> 00:00:11.370
برای مشاهده جزئیات به پایه کلید

5
00:00:11.370 --> 00:00:15.453
برای اینکه یاد بگیریم چه کاری انجام می دهد و چه زمانی باید از آن استفاده کنیم.

6
00:00:17.190 --> 00:00:19.863
بنابراین، تکیه گاه کلیدی یک تکیه گاه ویژه است

7
00:00:19.863 --> 00:00:22.740
که می توانیم از آن برای گفتن الگوریتم های مختلف استفاده کنیم

8
00:00:22.740 --> 00:00:25.860
که یک عنصر خاص منحصر به فرد است.

9
00:00:25.860 --> 00:00:30.153
و این هم برای عناصر DOM و هم برای عناصر React کار می کند.

10
00:00:30.990 --> 00:00:33.960
بنابراین در عمل، این بدان معنی است که ما می توانیم بدهیم

11
00:00:33.960 --> 00:00:37.620
هر نمونه جزء یک شناسایی منحصر به فرد است

12
00:00:37.620 --> 00:00:40.080
که به React امکان تمایز را می دهد

13
00:00:40.080 --> 00:00:44.700
بین چندین نمونه از یک نوع جزء.

14
00:00:44.700 --> 00:00:49.650
اکنون همه چیز عالی است، اما چرا ما واقعاً به این نیاز داریم؟

15
00:00:49.650 --> 00:00:52.137
خب، به یاد داشته باشید که فرض دوم

16
00:00:52.137 --> 00:00:54.180
الگوریتم تفاوت

17
00:00:54.180 --> 00:00:57.656
این است که هرگاه یک عنصر دارای یک کلید پایدار باشد

18
00:00:57.656 --> 00:01:01.336
بنابراین کلیدی که در سراسر رندرها یکسان می ماند

19
00:01:01.336 --> 00:01:04.500
عنصر در DOM حفظ خواهد شد

20
00:01:04.500 --> 00:01:08.250
حتی اگر موقعیت درخت تغییر کرده باشد.

21
00:01:08.250 --> 00:01:12.120
و این تمام دلیلی است که ما باید از تکیه گاه کلید استفاده کنیم

22
00:01:12.120 --> 00:01:15.000
در لیست ها همانطور که قبلا انجام داده ایم

23
00:01:15.000 --> 00:01:17.850
خیلی بار در طول دوره.

24
00:01:17.850 --> 00:01:19.590
و بنابراین، در اسلاید بعدی،

25
00:01:19.590 --> 00:01:23.370
در نهایت خواهید فهمید که چرا ما باید این کار را انجام دهیم.

26
00:01:23.370 --> 00:01:25.170
از سوی دیگر، هنگامی که کلید

27
00:01:25.170 --> 00:01:28.320
تغییر عنصر خاصی بین رندرها

28
00:01:28.320 --> 00:01:32.310
عنصر از بین خواهد رفت و عنصر جدیدی ایجاد خواهد شد

29
00:01:32.310 --> 00:01:35.310
در جای خود، حتی اگر عناصر قرار گرفته باشند

30
00:01:35.310 --> 00:01:39.270
در درخت دقیقاً مانند قبل است.

31
00:01:39.270 --> 00:01:41.924
و بنابراین این برای بازنشانی حالت عالی است

32
00:01:41.924 --> 00:01:46.560
که دومین مورد بزرگ استفاده از پایه کلید است.

33
00:01:46.560 --> 00:01:50.284
اما اجازه دهید به اولین مورد بزرگ استفاده از پایه کلید بازگردیم.

34
00:01:50.284 --> 00:01:54.420
که برای استفاده از کلیدها در لیست ها است.

35
00:01:54.420 --> 00:01:59.190
و اجازه دهید با در نظر گرفتن این مثال بدون کلید شروع کنیم.

36
00:01:59.190 --> 00:02:02.460
بنابراین در اینجا، ما یک لیست با دو سوال داریم.

37
00:02:02.460 --> 00:02:05.520
که به وضوح هیچ تکیه گاه کلیدی ندارند

38
00:02:05.520 --> 00:02:08.820
اما بیایید ببینیم وقتی یک مورد جدید اضافه می کنیم چه اتفاقی می افتد

39
00:02:08.820 --> 00:02:11.520
به بالای لیست.

40
00:02:11.520 --> 00:02:15.061
خب، دو مورد لیستی که قبلاً داشتیم به وضوح مشخص است

41
00:02:15.061 --> 00:02:18.210
هنوز یکسان است، اما آنها اکنون ظاهر می شوند

42
00:02:18.210 --> 00:02:22.050
در موقعیت های مختلف در React Elementary.

43
00:02:22.050 --> 00:02:24.960
آنها دیگر فرزند اول و دوم نیستند

44
00:02:24.960 --> 00:02:28.383
اما اکنون آنها فرزندان دوم و سوم هستند.

45
00:02:29.250 --> 00:02:32.070
بنابراین، ما اساساً عناصر مشابهی داریم

46
00:02:32.070 --> 00:02:34.800
اما در موقعیت های مختلف در درخت.

47
00:02:34.800 --> 00:02:37.110
و بنابراین طبق قوانین مختلف

48
00:02:37.110 --> 00:02:40.110
که قبلا یاد گرفتیم، این دو عنصر DOM

49
00:02:40.110 --> 00:02:44.520
از DOM حذف می شود و بلافاصله دوباره ایجاد می شود

50
00:02:44.520 --> 00:02:46.530
در موقعیت های جدید خود.

51
00:02:46.530 --> 00:02:50.970
و این بدیهی است که برای عملکرد شرط بندی شده است زیرا حذف

52
00:02:50.970 --> 00:02:55.740
و بازسازی همان عنصر گنگ کار بیهوده ای است

53
00:02:55.740 --> 00:02:58.800
درسته؟=>اما مسئله این است که React

54
00:02:58.800 --> 00:03:01.800
نمی داند که این کار بیهوده است.

55
00:03:01.800 --> 00:03:04.920
البته، ما توسعه دهندگان به طور مستقیم می دانیم

56
00:03:04.920 --> 00:03:08.670
این دو عنصر در واقع مانند قبل هستند

57
00:03:08.670 --> 00:03:12.240
اما React راهی برای دانستن این موضوع ندارد.

58
00:03:12.240 --> 00:03:15.378
اما اگر واقعاً بتوانیم آن را تغییر دهیم چه؟

59
00:03:15.378 --> 00:03:20.147
خب، اینجاست که کلیدها وارد بازی می شوند زیرا به یاد داشته باشید.

60
00:03:20.147 --> 00:03:25.147
یک کلید به ما توسعه دهندگان اجازه می دهد تا به طور منحصر به فرد یک عنصر را شناسایی کنیم

61
00:03:25.860 --> 00:03:28.620
بنابراین ما می توانیم آن اطلاعات را به React بدهیم

62
00:03:28.620 --> 00:03:31.230
که به خودی خود ندارد.

63
00:03:31.230 --> 00:03:35.790
و اکنون وقتی یک مورد جدید را به بالای لیست اضافه می کنیم.

64
00:03:35.790 --> 00:03:38.400
البته دو عنصر اصلی هستند

65
00:03:38.400 --> 00:03:40.980
هنوز در موقعیت های مختلف درخت

66
00:03:40.980 --> 00:03:43.560
اما آنها یک کلید پایدار دارند.

67
00:03:43.560 --> 00:03:47.280
بنابراین، کلیدی که در سراسر رندر یکسان می ماند.

68
00:03:47.280 --> 00:03:51.180
بنابراین در این مورد q1 و q2 است.

69
00:03:51.180 --> 00:03:53.670
و بنابراین طبق قوانین مختلف

70
00:03:53.670 --> 00:03:57.180
این دو عنصر اکنون در زباله دان نگهداری می شوند

71
00:03:57.180 --> 00:04:00.930
هر چند موقعیت آنها در درخت متفاوت است.

72
00:04:00.930 --> 00:04:03.360
بنابراین، آنها نابود نمی شوند».

73
00:04:03.360 --> 00:04:07.950
نتیجه ورودی کمی بیشتر یک رابط کاربری کارآمد خواهد بود.

74
00:04:07.950 --> 00:04:10.830
البته اکنون، شما واقعاً متوجه این تفاوت نخواهید شد

75
00:04:10.830 --> 00:04:14.250
در لیست های کوچک، اما تفاوت بزرگی ایجاد خواهد کرد

76
00:04:14.250 --> 00:04:18.089
وقتی شما یک لیست واقعا بزرگ با هزاران عنصر دارید

77
00:04:18.089 --> 00:04:21.990
که در واقع می تواند در برخی از برنامه ها اتفاق بیفتد.

78
00:04:21.990 --> 00:04:25.110
پس به طور خلاصه، همیشه از پایه کلید استفاده کنید

79
00:04:25.110 --> 00:04:28.830
وقتی چندین عنصر فرزند از یک نوع دارید.

80
00:04:28.830 --> 00:04:32.580
پس درست مانند عناصر سوال در این مثال

81
00:04:32.580 --> 00:04:36.390
و شما قبلاً می دانستید که باید این کار را انجام دهید زیرا به خوبی

82
00:04:36.390 --> 00:04:40.200
در غیر این صورت، React شکایت خواهد کرد و به ما هشدار خواهد داد

83
00:04:40.200 --> 00:04:42.900
اما اکنون، امیدوارم دقیقا متوجه شوید

84
00:04:42.900 --> 00:04:44.793
چرا باید این کار را انجام دهید.

85
00:04:45.949 --> 00:04:50.949
بسیار خوب، بنابراین ما به استفاده از یک کلید پایدار نگاه کردیم.

86
00:04:51.120 --> 00:04:54.840
و بنابراین اکنون بیایید به استفاده از یک کلید در حال تغییر نگاه کنیم.

87
00:04:54.840 --> 00:04:59.460
که برای تنظیم مجدد حالت در نمونه های جزء استفاده می شود.

88
00:04:59.460 --> 00:05:02.160
اکنون اینجا، ما به یک مثال کد بزرگ نیاز نداریم

89
00:05:02.160 --> 00:05:05.520
زیرا این کار را در سخنرانی بعدی به صورت عملی انجام خواهیم داد.»

90
00:05:05.520 --> 00:05:09.243
اما اجازه دهید منظورم از تنظیم مجدد حالت را به شما نشان دهم.

91
00:05:10.260 --> 00:05:14.400
بنابراین، بیایید بگوییم که ما این سوال را داریم، داخل جعبه سوال

92
00:05:14.400 --> 00:05:18.180
و ما در این شیء به عنوان یک تکیه گاه عبور می کنیم.

93
00:05:18.180 --> 00:05:22.200
اکنون نمونه جزء سوال یک حالت پاسخ دارد.

94
00:05:22.200 --> 00:05:25.740
که در حال حاضر روی React به ما اجازه می دهد تنظیم شده است

95
00:05:25.740 --> 00:05:27.720
برای ساخت سریعتر برنامه ها.

96
00:05:27.720 --> 00:05:30.750
اما اکنون، بیایید تصور کنیم که سوال تغییر می کند

97
00:05:30.750 --> 00:05:32.193
به این یکی.

98
00:05:33.060 --> 00:05:36.630
بنابراین، ما هنوز همان عنصر را در همان موقعیت داریم

99
00:05:36.630 --> 00:05:37.740
توی درخت.

100
00:05:37.740 --> 00:05:40.920
تمام چیزی که تغییر کرد پشتوانه سوال بود.

101
00:05:40.920 --> 00:05:45.390
بنابراین، فکر می کنید در این مورد چه اتفاقی برای دولت خواهد افتاد؟

102
00:05:45.390 --> 00:05:49.620
خب، بیایید یکی از قوانین متفاوت را به خاطر بسپاریم که می گوید

103
00:05:49.620 --> 00:05:52.920
که اگر عنصر مشابهی را در یک موقعیت داشته باشیم

104
00:05:52.920 --> 00:05:57.920
در درخت، عنصر DOM و وضعیت آن حفظ خواهد شد.

105
00:05:58.170 --> 00:06:02.310
بنابراین، آنچه قرار است اتفاق بیفتد این است که وضعیت سوال است

106
00:06:02.310 --> 00:06:03.780
حفظ خواهد شد.

107
00:06:03.780 --> 00:06:05.970
بنابراین، همچنان پاسخ را نشان خواهد داد

108
00:06:05.970 --> 00:06:09.120
که قبلا در حالت جزء بود.

109
00:06:09.120 --> 00:06:10.410
اما این پاسخ است

110
00:06:10.410 --> 00:06:15.270
البته کاملاً بی ربط به این سوال جدید، درست است؟

111
00:06:15.270 --> 00:06:18.480
بنابراین، حفظ این وضعیت منطقی نیست

112
00:06:18.480 --> 00:06:19.503
اطراف اینجا.

113
00:06:20.460 --> 00:06:25.320
بنابراین اساساً آنچه ما نیاز داریم راهی برای تنظیم مجدد این حالت است.»

114
00:06:25.320 --> 00:06:26.970
و همانطور که می توانید حدس بزنید

115
00:06:26.970 --> 00:06:31.620
این جایی است که کلید اصلی یک بار دیگر وارد بازی می شود.

116
00:06:31.620 --> 00:06:34.860
بنابراین، ما یک کلید از q23 داریم.

117
00:06:34.860 --> 00:06:37.470
در این سوال اول، که به React اجازه می دهد

118
00:06:37.470 --> 00:06:41.158
برای شناسایی منحصر به فرد این نمونه جزء.

119
00:06:41.158 --> 00:06:43.860
سپس وقتی یک سوال جدید ظاهر شد

120
00:06:43.860 --> 00:06:46.320
ما می توانیم کلید متفاوتی به آن بدهیم.

121
00:06:46.320 --> 00:06:48.930
و بنابراین با انجام این کار، ما به React می گوییم

122
00:06:48.930 --> 00:06:51.526
که این باید یک نمونه جزء متفاوت باشد

123
00:06:51.526 --> 00:06:56.070
و بنابراین، باید یک عنصر DOM کاملاً جدید ایجاد کند.

124
00:06:56.070 --> 00:06:58.290
و نتیجه انجام این کار

125
00:06:58.290 --> 00:07:00.499
این است که وضعیت بازنشانی خواهد شد

126
00:07:00.499 --> 00:07:03.740
این دقیقا همان چیزی است که ما در این شرایط به آن نیاز داریم

127
00:07:03.740 --> 00:07:08.370
برای اینکه این برنامه کوچک به روشی منطقی کار کند.

128
00:07:08.370 --> 00:07:10.200
پس هر وقت خودت را پیدا کردی

129
00:07:10.200 --> 00:07:12.864
در موقعیتی که نیاز به تنظیم مجدد حالت دارید

130
00:07:12.864 --> 00:07:16.020
فقط مطمئن شوید که یک کلید به عنصر داده اید

131
00:07:16.020 --> 00:07:19.745
و اینکه کلید در بین رندرها تغییر می کند.

132
00:07:19.745 --> 00:07:23.760
اکنون، این در واقع اغلب اوقات ضروری است

133
00:07:23.760 --> 00:07:27.180
اما شما گاهی اوقات خود را در این موقعیت خواهید یافت.

134
00:07:27.180 --> 00:07:28.860
و بنابراین وقتی این اتفاق می افتد

135
00:07:28.860 --> 00:07:33.090
خیلی مهم است که بدانیم این راه حل است.

136
00:07:33.090 --> 00:07:33.923
باشه.

137
00:07:33.923 --> 00:07:36.300
و برای اینکه اکنون این موضوع را واضح تر نشان دهیم

138
00:07:36.300 --> 00:07:38.853
بیایید به پروژه کوچک خود برگردیم.

