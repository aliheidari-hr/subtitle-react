WEBVTT

1
00:00:01.140 --> 00:00:04.470
حالا مباحث رندر و حالت را رها می کنیم.

2
00:00:04.470 --> 00:00:06.900
و به بخش اساسی دیگری روی آورید

3
00:00:06.900 --> 00:00:09.330
از برنامه های React که ما نداریم

4
00:00:09.330 --> 00:00:13.020
هنوز واقعاً در مورد آن صحبت شده است، و این رویدادها است.

5
00:00:13.020 --> 00:00:17.130
بنابراین در این سخنرانی، یاد خواهیم گرفت که React چگونه رویدادها را مدیریت می کند.

6
00:00:17.130 --> 00:00:19.203
و چگونه آنها در پشت صحنه کار می کنند

7
00:00:20.640 --> 00:00:23.040
اما بیایید با یک تجدید نظر سریع شروع کنیم

8
00:00:23.040 --> 00:00:26.340
درباره نحوه انتشار رویداد و نمایندگی رویداد

9
00:00:26.340 --> 00:00:28.200
کار در DOM

10
00:00:28.200 --> 00:00:32.220
زیرا این مهم است که بدانیم React چگونه کار می کند.

11
00:00:32.220 --> 00:00:35.070
و همچنین، زیرا من معتقدم که بسیاری از مردم

12
00:00:35.070 --> 00:00:37.830
درک خوبی از چگونگی رویدادها ندارم

13
00:00:37.830 --> 00:00:40.380
در واقع در مرورگر کار می کند.

14
00:00:40.380 --> 00:00:44.010
پس بیایید این درخت از عناصر DOM را در نظر بگیریم.

15
00:00:44.010 --> 00:00:47.400
و توجه داشته باشید که این واقعا یک درخت DOM است.

16
00:00:47.400 --> 00:00:51.660
بنابراین نه یک درخت فیبر یا درخت عنصر React.

17
00:00:51.660 --> 00:00:54.540
و اکنون، بیایید بگوییم که رویدادی رخ می دهد.

18
00:00:54.540 --> 00:00:57.510
مانند کلیک بر روی یکی از سه دکمه

19
00:00:57.510 --> 00:01:00.900
و بنابراین در اینجا چیزی است که قرار است در مرورگر اتفاق بیفتد.

20
00:01:00.900 --> 00:01:02.850
به محض شروع رویداد

21
00:01:02.850 --> 00:01:05.610
یک شی رویداد جدید ایجاد خواهد شد

22
00:01:05.610 --> 00:01:08.340
اما جایی که کلیک می شود ایجاد نمی شود

23
00:01:08.340 --> 00:01:09.840
در واقع اتفاق افتاده است.

24
00:01:09.840 --> 00:01:12.540
در عوض، شی ایجاد خواهد شد

25
00:01:12.540 --> 00:01:14.790
در ریشه سند

26
00:01:14.790 --> 00:01:17.760
پس در بالای درخت.

27
00:01:17.760 --> 00:01:22.020
از آنجا، رویداد سپس تمام درخت را طی خواهد کرد

28
00:01:22.020 --> 00:01:24.780
در طول مرحله به اصطلاح گرفتن،

29
00:01:24.780 --> 00:01:28.470
تمام راه، تا زمانی که به عنصر هدف برسد،

30
00:01:28.470 --> 00:01:31.200
و عنصر هدف به سادگی عنصر است

31
00:01:31.200 --> 00:01:35.070
رویداد در واقع برای اولین بار در آن آغاز شد.

32
00:01:35.070 --> 00:01:38.790
بنابراین در هدف، ما می توانیم انتخاب کنیم که رویداد را مدیریت کنیم

33
00:01:38.790 --> 00:01:42.600
با قرار دادن یک تابع کنترل کننده رویداد روی آن عنصر،

34
00:01:42.600 --> 00:01:45.930
که معمولاً دقیقاً همان کاری است که ما انجام می دهیم.

35
00:01:45.930 --> 00:01:49.650
سپس بلافاصله پس از رسیدن به عنصر هدف

36
00:01:49.650 --> 00:01:54.420
شیء رویداد تمام مسیر را تا کل درخت طی می کند

37
00:01:54.420 --> 00:01:57.390
در طول به اصطلاح فاز حباب.

38
00:01:57.390 --> 00:01:59.700
حالا، دو چیز بسیار مهم وجود دارد

39
00:01:59.700 --> 00:02:02.250
برای درک در مورد این روند.

40
00:02:02.250 --> 00:02:06.270
اولین مورد این است که در مرحله گرفتن و حباب زدن،

41
00:02:06.270 --> 00:02:09.900
این رویداد واقعاً از طریق تک تک کودکان می گذرد

42
00:02:09.900 --> 00:02:12.720
و عنصر والد یکی یکی.

43
00:02:12.720 --> 00:02:15.900
در واقع، اگر این رویداد سرچشمه گرفته باشد

44
00:02:15.900 --> 00:02:19.860
یا در هر یک از این عناصر DOM اتفاق افتاده است.

45
00:02:19.860 --> 00:02:23.190
دومین نکته مهم این است که به طور پیش فرض،

46
00:02:23.190 --> 00:02:25.350
گردانندگان رویداد به رویدادها گوش می دهند

47
00:02:25.350 --> 00:02:27.690
نه تنها در عنصر هدف،

48
00:02:27.690 --> 00:02:30.990
اما همچنین در مرحله حباب،

49
00:02:30.990 --> 00:02:33.750
پس اگر این دو چیز را کنار هم بگذاریم

50
00:02:33.750 --> 00:02:37.800
به این معنی است که هر کنترل کننده رویداد در یک عنصر والد

51
00:02:37.800 --> 00:02:41.340
همچنین در مرحله حباب زدن اجرا خواهد شد

52
00:02:41.340 --> 00:02:46.080
تا زمانی که در حال گوش دادن به همان نوع رویداد باشد.

53
00:02:46.080 --> 00:02:49.470
به عنوان مثال، اگر کنترل کننده رویداد کلیک دیگری را ویرایش کنیم

54
00:02:49.470 --> 00:02:51.210
به عنصر هدر

55
00:02:51.210 --> 00:02:53.460
سپس در طول این فرآیند

56
00:02:53.460 --> 00:02:57.030
هم کنترل کننده ها در هدف و هم عنصر هدر

57
00:02:57.030 --> 00:03:00.270
وقتی کلیک اتفاق می افتد اجرا می شود.

58
00:03:00.270 --> 00:03:03.780
اکنون، گاهی اوقات ما واقعاً این رفتار را نمی‌خواهیم.

59
00:03:03.780 --> 00:03:06.870
و بنابراین در آن صورت، ما می توانیم از این رویداد جلوگیری کنیم

60
00:03:06.870 --> 00:03:09.840
از حباب کردن بیشتر به سادگی با تماس

61
00:03:09.840 --> 00:03:13.710
روش stopPropagation روی شی رویداد

62
00:03:13.710 --> 00:03:18.150
و این در جاوا اسکریپت وانیلی و همچنین در React کار می کند.

63
00:03:18.150 --> 00:03:20.910
اما در واقع به ندرت لازم است

64
00:03:20.910 --> 00:03:24.573
پس فقط اگر واقعاً راه حل دیگری وجود ندارد از این استفاده کنید.

65
00:03:25.770 --> 00:03:30.770
بسیار خوب، بنابراین اساساً رویدادها در مرورگر چگونه کار می کنند.

66
00:03:31.350 --> 00:03:34.470
حالا، این واقعیت که رویدادها به این شکل حباب می شوند

67
00:03:34.470 --> 00:03:37.680
به توسعه دهندگان اجازه می دهد تا یک مورد بسیار رایج را پیاده سازی کنند

68
00:03:37.680 --> 00:03:41.940
و تکنیک بسیار مفیدی به نام نمایندگی رویداد.

69
00:03:41.940 --> 00:03:45.060
بنابراین با اعزام رویداد، ما می توانیم رویدادها را مدیریت کنیم

70
00:03:45.060 --> 00:03:48.510
برای چندین عنصر در یک مکان مرکزی

71
00:03:48.510 --> 00:03:51.690
که یکی از عناصر والد است.

72
00:03:51.690 --> 00:03:54.870
پس تصور کنید که به جای سه دکمه

73
00:03:54.870 --> 00:03:57.780
مثلاً 1000 دکمه وجود دارد.

74
00:03:57.780 --> 00:04:01.320
حالا، اگر بخواهیم رویدادهای مربوط به همه آنها را مدیریت کنیم،

75
00:04:01.320 --> 00:04:04.620
هر دکمه باید کپی خودش را داشته باشد

76
00:04:04.620 --> 00:04:06.570
عملکرد کنترل کننده رویداد

77
00:04:06.570 --> 00:04:08.280
که می تواند مشکل ساز شود

78
00:04:08.280 --> 00:04:11.850
برای عملکرد برنامه و استفاده از حافظه.

79
00:04:11.850 --> 00:04:15.300
بنابراین در عوض، با استفاده از نمایندگی رویداد،

80
00:04:15.300 --> 00:04:18.269
ما به سادگی می توانیم فقط یک تابع کنترل کننده اضافه کنیم

81
00:04:18.269 --> 00:04:22.140
به اولین عنصر والد این دکمه ها.

82
00:04:22.140 --> 00:04:25.260
سپس وقتی روی یکی از دکمه ها کلیک می شود

83
00:04:25.260 --> 00:04:29.730
رویداد به قسمت گزینه های این مثال حباب می شود

84
00:04:29.730 --> 00:04:33.210
«جایی که می‌توانیم از ویژگی رویدادهای هدف استفاده کنیم»

85
00:04:33.210 --> 00:04:36.150
به منظور بررسی اینکه آیا رویداد منشا گرفته است

86
00:04:36.150 --> 00:04:39.030
از یکی از دکمه ها یا نه

87
00:04:39.030 --> 00:04:42.150
و اگر چنین شد، ما می توانیم رویداد را مدیریت کنیم

88
00:04:42.150 --> 00:04:45.510
در این عملکرد کنترل کننده رویداد مرکزی.

89
00:04:45.510 --> 00:04:47.940
حالا، اگر دوره جاوا اسکریپت من را گذراندید،

90
00:04:47.940 --> 00:04:50.970
پس شما قبلاً می دانید که چگونه این کار را در عمل انجام دهید.

91
00:04:50.970 --> 00:04:54.150
چون در واقع، ما این کار را همیشه انجام می دهیم

92
00:04:54.150 --> 00:04:56.940
در برنامه های کاربردی جاوا اسکریپت وانیلی.

93
00:04:56.940 --> 00:05:00.660
با این حال، در برنامه های React، در واقع چندان رایج نیست.

94
00:05:00.660 --> 00:05:03.240
برای اینکه ما از این تکنیک استفاده کنیم

95
00:05:03.240 --> 00:05:05.280
اما این ممکن است شما را متعجب کند

96
00:05:05.280 --> 00:05:08.370
اگر این واقعاً در React مهم نیست

97
00:05:08.370 --> 00:05:11.370
پس چرا ما در مورد این صحبت می کنیم؟

98
00:05:11.370 --> 00:05:13.920
خب، به دو دلیل.

99
00:05:13.920 --> 00:05:17.880
اول، زیرا گاهی اوقات رفتارهای عجیبی پیدا می کنید

100
00:05:17.880 --> 00:05:20.730
مربوط به رویدادهای برنامه های شما،

101
00:05:20.730 --> 00:05:24.630
که در واقع ممکن است با حباب رویداد مرتبط باشد،

102
00:05:24.630 --> 00:05:27.390
و به عنوان یک توسعه دهنده خوب React،

103
00:05:27.390 --> 00:05:30.840
شما همیشه می خواهید بفهمید که دقیقا چه اتفاقی در حال رخ دادن است

104
00:05:30.840 --> 00:05:33.930
به منظور رفع این مشکلات

105
00:05:33.930 --> 00:05:37.500
و دلیل دوم این است که این در واقع است

106
00:05:37.500 --> 00:05:41.490
آنچه React در پشت صحنه با رویدادهای ما انجام می دهد

107
00:05:41.490 --> 00:05:43.443
و بنابراین بیایید نگاهی به آن بیندازیم.

108
00:05:44.580 --> 00:05:48.000
پس بیایید همین درخت DOM را در نظر بگیریم.

109
00:05:48.000 --> 00:05:50.280
و بیایید دوباره بگوییم که می خواهیم ضمیمه کنیم

110
00:05:50.280 --> 00:05:53.160
کنترل کننده رویداد به یکی از دکمه ها،

111
00:05:53.160 --> 00:05:56.220
یا حتی به برخی از عناصر DOM دیگر،

112
00:05:56.220 --> 00:06:00.390
و این همان چیزی است که در کد React به نظر می رسد.

113
00:06:00.390 --> 00:06:03.180
بنابراین ما به سادگی از پایه onClick استفاده می کنیم

114
00:06:03.180 --> 00:06:07.440
برای گوش دادن به رویدادهای کلیک، و سپس ارسال آن یک تابع.

115
00:06:07.440 --> 00:06:10.230
پس این واقعا آسان است، درست است؟

116
00:06:10.230 --> 00:06:12.630
اکنون، اگر به نحوه واکنش فکر کنیم

117
00:06:12.630 --> 00:06:16.380
در واقع این گردانندگان رویداد را در پشت صحنه ثبت می کند.

118
00:06:16.380 --> 00:06:21.060
ما ممکن است باور کنیم که چیزی شبیه به این خواهد بود.

119
00:06:21.060 --> 00:06:23.880
بنابراین React ممکن است یک دکمه را انتخاب کند،

120
00:06:23.880 --> 00:06:27.450
و سپس کنترل کننده رویداد را به آن عنصر اضافه کنید.

121
00:06:27.450 --> 00:06:30.720
پس خیلی منطقی به نظر می رسد، درست است؟

122
00:06:30.720 --> 00:06:35.310
با این حال، این چیزی نیست که React در داخل انجام می دهد.

123
00:06:35.310 --> 00:06:39.780
در عوض، آنچه React در واقع انجام می دهد ثبت این است.

124
00:06:39.780 --> 00:06:42.390
و سایر توابع کنترل کننده رویداد

125
00:06:42.390 --> 00:06:44.880
به محفظه DOM ریشه

126
00:06:44.880 --> 00:06:48.180
و آن محفظه ریشه به سادگی عنصر DOM است

127
00:06:48.180 --> 00:06:51.660
که در آن برنامه React نمایش داده می شود.

128
00:06:51.660 --> 00:06:55.350
بنابراین اگر از پیش‌فرض Create React App استفاده کنیم،

129
00:06:55.350 --> 00:07:00.350
این معمولاً عنصر div با شناسه تنظیم شده برای مسیر است.

130
00:07:00.390 --> 00:07:03.840
پس دوباره به جای انتخاب دکمه

131
00:07:03.840 --> 00:07:06.780
جایی که ما واقعاً مدیریت رویداد خود را در آن قرار دادیم

132
00:07:06.780 --> 00:07:10.410
می توانیم تصور کنیم که React عنصر مسیر را انتخاب می کند.

133
00:07:10.410 --> 00:07:15.300
و سپس همه کنترل کننده های رویداد ما را به آن عنصر اضافه می کند.

134
00:07:15.300 --> 00:07:18.390
و من می گویم تصور کنید، زیرا روش واکنش نشان می دهد

135
00:07:18.390 --> 00:07:21.000
این همه پشت پرده واقعا

136
00:07:21.000 --> 00:07:23.370
بسیار پیچیده تر از این

137
00:07:23.370 --> 00:07:26.820
اما این واقعا ارزش غواصی در اینجا را ندارد.

138
00:07:26.820 --> 00:07:28.890
تنها چیزی که ارزش دانستن دارد

139
00:07:28.890 --> 00:07:31.710
این است که React به صورت فیزیکی ثبت می شود

140
00:07:31.710 --> 00:07:35.220
یک تابع کنترل کننده رویداد برای هر نوع رویداد،

141
00:07:35.220 --> 00:07:38.940
و این کار را در نت ریشه درخت فیبر انجام می دهد

142
00:07:38.940 --> 00:07:40.950
در مرحله رندر.

143
00:07:40.950 --> 00:07:45.030
بنابراین اگر چندین کنترل کننده onClick در کد خود داشته باشیم،

144
00:07:45.030 --> 00:07:48.450
واکنش نشان دهید ما در واقع به نوعی همه آنها را با هم ترکیب خواهیم کرد

145
00:07:48.450 --> 00:07:51.750
و فقط یک کنترل کننده بزرگ onClick اضافه کنید

146
00:07:51.750 --> 00:07:54.660
به گره ریشه درخت فیبر

147
00:07:54.660 --> 00:07:57.510
و بنابراین این یک عملکرد مهم دیگر است

148
00:07:57.510 --> 00:07:58.833
درخت الیاف

149
00:07:59.850 --> 00:08:04.050
اما به هر حال، معنایش این است که پشت صحنه،

150
00:08:04.050 --> 00:08:06.960
React در واقع نمایندگی رویداد را انجام می دهد

151
00:08:06.960 --> 00:08:10.410
برای همه رویدادهای برنامه های ما.

152
00:08:10.410 --> 00:08:13.860
بنابراین می توانیم بگوییم که React همه وقایع را نمایندگی می کند.

153
00:08:13.860 --> 00:08:15.900
به محفظه DOM ریشه

154
00:08:15.900 --> 00:08:19.440
زیرا این جایی است که آنها واقعاً مورد رسیدگی قرار می گیرند.

155
00:08:19.440 --> 00:08:23.430
نه در جایی که فکر می کردیم آنها را ثبت کرده ایم

156
00:08:23.430 --> 00:08:26.730
و بنابراین این دقیقاً همانطور که ما یاد گرفتیم کار می کند

157
00:08:26.730 --> 00:08:28.800
در اسلاید قبلی.

158
00:08:28.800 --> 00:08:32.820
بنابراین دوباره، هر زمان که یک کلیک روی دکمه اتفاق افتاد،

159
00:08:32.820 --> 00:08:35.669
یک شی رویداد جدید شلیک می شود

160
00:08:35.669 --> 00:08:38.220
که سپس به پایین درخت DOM سفر خواهد کرد

161
00:08:38.220 --> 00:08:41.070
تا زمانی که به عنصر هدف برسد.

162
00:08:41.070 --> 00:08:44.700
از آنجا، رویداد حباب خواهد شد.

163
00:08:44.700 --> 00:08:48.090
سپس به محض اینکه رویداد به ظرف ریشه رسید

164
00:08:48.090 --> 00:08:51.180
جایی که React همه گردانندگان ما را ثبت کرد

165
00:08:51.180 --> 00:08:54.510
رویداد در نهایت رسیدگی خواهد شد

166
00:08:54.510 --> 00:08:57.690
با توجه به هر چیزی که کنترل کننده با رویداد مطابقت دارد

167
00:08:57.690 --> 00:08:59.850
و عنصر هدف.

168
00:08:59.850 --> 00:09:02.910
و در نهایت، وقتی همه چیز تمام شد،

169
00:09:02.910 --> 00:09:05.550
رویداد، البته، همچنان ادامه دارد

170
00:09:05.550 --> 00:09:08.850
تا زمانی که در هیچ جا ناپدید شود

171
00:09:08.850 --> 00:09:12.780
و زیبایی این است که همه چیز به طور خودکار اتفاق می افتد

172
00:09:12.780 --> 00:09:15.990
و به صورت نامرئی فقط برای ساختن برنامه های React ما

173
00:09:15.990 --> 00:09:18.930
با این حال کمی عملکرد بیشتر.

174
00:09:18.930 --> 00:09:22.380
اکنون، فقط یک جزئیات کوچک که می خواهم به آن توجه کنید

175
00:09:22.380 --> 00:09:25.560
این واقعاً درخت DOM است که در اینجا مهم است.

176
00:09:25.560 --> 00:09:27.810
نه درخت جزء.

177
00:09:27.810 --> 00:09:30.900
پس فقط به این دلیل که یک جزء کودک است

178
00:09:30.900 --> 00:09:32.490
یک جزء دیگر

179
00:09:32.490 --> 00:09:35.220
این بدان معنا نیست که همین امر صادق است

180
00:09:35.220 --> 00:09:37.230
در درخت DOM نمایش داده شده.

181
00:09:37.230 --> 00:09:39.390
پس هنگام فکر کردن فقط این را در نظر داشته باشید

182
00:09:39.390 --> 00:09:42.213
درباره حباب زدن در برنامه های React.

183
00:09:44.160 --> 00:09:47.340
بسیار خوب، پس ما در مورد رویدادها زیاد صحبت کردیم

184
00:09:47.340 --> 00:09:48.930
و اشیاء رویداد

185
00:09:48.930 --> 00:09:51.690
و خب حالا، بیایید با نگاهی به کار تمام کنیم

186
00:09:51.690 --> 00:09:56.220
در این که چگونه این اشیاء رویداد واقعاً در پشت صحنه کار می کنند.

187
00:09:56.220 --> 00:10:00.180
بنابراین هر زمان که ما یک کنترل کننده رویداد مانند این را اعلام می کنیم.

188
00:10:00.180 --> 00:10:03.300
React به ما دسترسی به شی رویداد را می دهد

189
00:10:03.300 --> 00:10:07.620
که درست مانند جاوا اسکریپت وانیلی ایجاد شد.

190
00:10:07.620 --> 00:10:12.620
با این حال، در React، این شی رویداد در واقع متفاوت است.

191
00:10:12.990 --> 00:10:16.320
بنابراین در وانیلی جاوا اسکریپت، ما به سادگی دسترسی داریم

192
00:10:16.320 --> 00:10:19.770
برای مثال، به شی رویداد اصلی DOM،

193
00:10:19.770 --> 00:10:24.770
رویداد اشاره گر، رویداد ماوس، رویداد صفحه کلید، و بسیاری موارد دیگر.

194
00:10:25.200 --> 00:10:27.780
از طرف دیگر واکنش نشان می دهد چیزی به ما می دهد.

195
00:10:27.780 --> 00:10:30.180
یک رویداد مصنوعی نامیده می شود

196
00:10:30.180 --> 00:10:32.460
که در اصل یک لفاف نازک است

197
00:10:32.460 --> 00:10:35.880
در اطراف شی رویداد اصلی DOM'S,

198
00:10:35.880 --> 00:10:39.390
و منظور ما از لفاف، رویدادهای مصنوعی است

199
00:10:39.390 --> 00:10:42.840
بسیار شبیه به اشیاء رویداد بومی هستند

200
00:10:42.840 --> 00:10:46.440
اما آنها فقط برخی از عملکردها را اضافه یا تغییر می دهند

201
00:10:46.440 --> 00:10:48.390
در بالای آنها.

202
00:10:48.390 --> 00:10:52.260
بنابراین این رویدادهای مصنوعی رابط یکسانی دارند

203
00:10:52.260 --> 00:10:54.300
به عنوان اشیاء رویداد بومی،

204
00:10:54.300 --> 00:10:56.820
و این شامل روش های مهم است

205
00:10:56.820 --> 00:11:00.360
stop Propagation و preventDefault.

206
00:11:00.360 --> 00:11:03.150
هرچند چه چیز خاصی در مورد رویدادهای مصنوعی وجود دارد

207
00:11:03.150 --> 00:11:05.640
و یکی از دلایل تیم React

208
00:11:05.640 --> 00:11:08.310
تصمیم به اجرای آنها واقعیت است

209
00:11:08.310 --> 00:11:11.490
که برخی از ناسازگاری های مرورگر را برطرف می کنند،

210
00:11:11.490 --> 00:11:15.090
آن را به گونه ای انجام دهید که رویدادها دقیقاً به همان شیوه عمل کنند

211
00:11:15.090 --> 00:11:16.890
در همه مرورگرها.

212
00:11:16.890 --> 00:11:19.620
تیم React همچنین تصمیم گرفت که همه

213
00:11:19.620 --> 00:11:23.580
از مهمترین رویدادهای مصنوعی در واقع حباب می شود

214
00:11:23.580 --> 00:11:27.300
شامل تمرکز، محو کردن و تغییر رویدادها

215
00:11:27.300 --> 00:11:30.060
که معمولا حباب نمی زنند.

216
00:11:30.060 --> 00:11:32.880
تنها استثنا در اینجا رویداد اسکرول است.

217
00:11:32.880 --> 00:11:35.883
که همچنین در React حباب نمی شود.

218
00:11:36.810 --> 00:11:40.440
بسیار خوب، و حالا برای تمام کردن، می‌خواهم سریع اشاره کنم

219
00:11:40.440 --> 00:11:43.830
برخی تفاوت بین نحوه کار گردانندگان رویداد

220
00:11:43.830 --> 00:11:47.220
در جاوا اسکریپت React and vanilla.

221
00:11:47.220 --> 00:11:50.490
اولین مورد این است که در React، نام prop است.

222
00:11:50.490 --> 00:11:54.780
برای پیوست کردن یک رویداد کنترل کننده با استفاده از camelCase نامگذاری می شوند.

223
00:11:54.780 --> 00:11:58.680
پس چیزی شبیه onClick با حرف C بزرگ.

224
00:11:58.680 --> 00:12:00.690
از طرف دیگر در HTML،

225
00:12:00.690 --> 00:12:03.690
این خواهد بود onclick، تمام حروف کوچک،

226
00:12:03.690 --> 00:12:07.620
و اگر از addEventListener در جاوا اسکریپت وانیلی استفاده کنیم،

227
00:12:07.620 --> 00:12:10.320
رویداد به سادگی کلیک نامیده می شود.

228
00:12:10.320 --> 00:12:13.290
پس بدون پیشوند on.

229
00:12:13.290 --> 00:12:15.360
اکنون، در جاوا اسکریپت وانیلی،

230
00:12:15.360 --> 00:12:18.180
هر زمان که بخواهیم رفتار پیش فرض را متوقف کنیم

231
00:12:18.180 --> 00:12:20.910
مرورگر در پاسخ به یک رویداد

232
00:12:20.910 --> 00:12:24.810
ما می توانیم خطاها را از عملکرد کنترل کننده رویداد برگردانیم.

233
00:12:24.810 --> 00:12:27.570
و مثال بزرگ آن مرورگر است

234
00:12:27.570 --> 00:12:32.040
هنگامی که فرمی را ارسال می کنیم، صفحه به طور خودکار بارگیری مجدد می شود.

235
00:12:32.040 --> 00:12:35.400
با این حال، اگر ما تلاش کنیم تا عیوب را برگردانیم

236
00:12:35.400 --> 00:12:40.080
در یک کنترل کننده رویداد React، این به سادگی کار نمی کند.

237
00:12:40.080 --> 00:12:44.130
بنابراین در React، تنها راه جلوگیری از پیش‌فرض مرورگر است.

238
00:12:44.130 --> 00:12:47.100
رفتار برای فراخوانی preventDefault است

239
00:12:47.100 --> 00:12:50.040
روی شی رویداد مصنوعی.

240
00:12:50.040 --> 00:12:52.650
و در نهایت، در موارد نادری که نیاز دارید

241
00:12:52.650 --> 00:12:55.590
برای رسیدگی به یک رویداد در مرحله ضبط

242
00:12:55.590 --> 00:12:57.870
به جای در مرحله حباب،

243
00:12:57.870 --> 00:13:01.950
شما می توانید به سادگی Capture را به نام کنترل کننده رویداد پیوست کنید.

244
00:13:01.950 --> 00:13:06.480
به عنوان مثال، onClickCapture به جای فقط onClick،

245
00:13:06.480 --> 00:13:09.360
اما به احتمال زیاد، شما هرگز از این استفاده نخواهید کرد.

246
00:13:09.360 --> 00:13:12.693
پس فقط این را جایی در پشت ذهن خود نگه دارید.

247
00:13:13.920 --> 00:13:17.670
بسیار خوب، پس آنچه ما در این اسلاید یاد گرفتیم

248
00:13:17.670 --> 00:13:20.880
در اصل همه چیزهایی است که باید در عمل بدانید

249
00:13:20.880 --> 00:13:25.500
به منظور کار موفقیت آمیز با رویدادها در React.

250
00:13:25.500 --> 00:13:29.010
بقیه همه چیز به صورت نامرئی در پشت صحنه اتفاق می افتد.

251
00:13:29.010 --> 00:13:31.830
اما امیدوارم بقیه را هم پیدا کرده باشید

252
00:13:31.830 --> 00:13:33.330
از سخنرانی جالب

253
00:13:33.330 --> 00:13:35.880
و این به شما اعتماد به نفس بیشتری داد

254
00:13:35.880 --> 00:13:38.793
در کار با رویدادهای برنامه های خود.

